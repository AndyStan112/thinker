// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

//repair casing
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("user")
  experience    Int       @default(0)
  accounts      Account[]
  sessions      Session[]
  quests        Quest[]
  history       History[]
  decks         Deck[]
  cards         Card[]

  createdDecks Deck[] @relation(name: "DeckCreator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum SourceType {
  deck
  task
  quest
}

model History {
  id         String     @id @default(cuid())
  userId     String
  source     String
  experience Int        @default(0)
  sourceType SourceType
  date       DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Quest {
  id         String  @id @default(cuid())
  userId     String
  title      String
  experience Int     @default(0)
  finished   Boolean @default(false)
  tasks      Task[]
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String
  experience  Int
  finished    Boolean @default(false)
  questId     String
  quest       Quest   @relation(fields: [questId], references: [id], onDelete: Cascade)
}

model Subject {
  id    String @id @default(cuid())
  name  String
  decks Deck[]
}

model Deck {
  id          String    @id @default(cuid())
  title       String
  description String
  experience  Int
  userId      String
  subjects    Subject[]
  user        User[]
  creatorId   String
  creator     User      @relation(name: "DeckCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  Card        Card[]
}

model Card {
  id           String   @id @default(cuid())
  title        String
  content      String
  type         CardType
  answer       String[]
  diff         Int
  timesShown   Int
  timesCorrect Int
  deckId       String
  deck         Deck     @relation(fields: [deckId], references: [id])
  creatorId    String
  creator      User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

enum CardType {
  Question
  Flashcard
  MultipleChoice
}
